/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package hfsguardadir.gui;

import static javax.swing.BorderFactory.createTitledBorder;

import java.awt.Cursor;
import java.io.IOException;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;

import javax.swing.JComboBox;
import javax.swing.JDialog;

import hfsguardadir.catalogador.Catalogador;
import hfsguardadir.comum.Rotinas;
import hfsguardadir.comum.StringList;
import hfsguardadir.objetos.Aba;
import hfsguardadir.objetos.Diretorio;
import hfsguardadir.objetosbo.AbaBO;
import hfsguardadir.objetosbo.DiretorioBO;
import hfsguardadir.objetosgui.Arvore;
import hfsguardadir.objetosgui.Dialogo;
import hfsguardadir.objetosgui.Tabela;

public class FrmCompararDiretorio extends JDialog {
	private static final long serialVersionUID = 1L;

	private FrmCompararDiretorioProgresso frmCompararDiretorioProgresso;
	private final Catalogador catalogador;

	private Arvore arvoreDiretorio1;
	private Arvore arvoreDiretorio2;

	public Tabela tabelaCompara;
	public ArrayList<Diretorio> listaCompara;

	/**
	 * Creates new form FrmCompararDiretorio
	 */
	public FrmCompararDiretorio(java.awt.Frame parent, boolean modal) {
		super(parent, modal);
		initComponents();
		mudarLingua();

		montarArvores();
		listaCompara = new ArrayList<>();
		frmCompararDiretorioProgresso = new FrmCompararDiretorioProgresso(this);

		FrmPrincipal frmPrincipal = (FrmPrincipal) parent;
		catalogador = frmPrincipal.getCatalogador();

		LimparComparacao();
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	// <editor-fold defaultstate="collapsed" desc="Generated
	// Code">//GEN-BEGIN:initComponents
	private void initComponents() {

		barraFerra = new javax.swing.JToolBar();
		btnCompararDiretorios = new javax.swing.JButton();
		pb = new javax.swing.JProgressBar();
		btnSalvarLog = new javax.swing.JButton();
		panelCentral = new javax.swing.JPanel();
		panelDiretorio = new javax.swing.JPanel();
		panelDiretorio1 = new javax.swing.JPanel();
		cmbAba1 = new JComboBox<String>();
		scrollDiretorio1 = new javax.swing.JScrollPane();
		panelDiretorio2 = new javax.swing.JPanel();
		cmbAba2 = new JComboBox<String>();
		scrollDiretorio2 = new javax.swing.JScrollPane();
		panelDiferencasEncontradas = new javax.swing.JPanel();
		labDiferencasEncontradas = new javax.swing.JLabel();
		scrollTabelaCompara = new javax.swing.JScrollPane();
		barraStatus = new javax.swing.JPanel();
		barraStatus1 = new javax.swing.JLabel();
		barraStatus2 = new javax.swing.JLabel();

		setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
		java.util.ResourceBundle bundle = java.util.ResourceBundle
				.getBundle("recursos/hfsguardadiretorio_pt"); // NOI18N
		setTitle(bundle.getString("FrmCompararDiretorio.titulo")); // NOI18N
		setModal(true);
		setResizable(false);
		addWindowListener(new java.awt.event.WindowAdapter() {
			public void windowOpened(java.awt.event.WindowEvent evt) {
				formWindowOpened(evt);
			}
		});

		barraFerra.setFloatable(false);
		barraFerra.setRollover(true);

		btnCompararDiretorios.setMnemonic('C');
		btnCompararDiretorios.setText(bundle.getString("FrmCompararDiretorio.btnCompararDiretorios")); // NOI18N
		btnCompararDiretorios.setFocusable(false);
		btnCompararDiretorios.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnCompararDiretorios.setMinimumSize(new java.awt.Dimension(109, 25));
		btnCompararDiretorios.setPreferredSize(new java.awt.Dimension(109, 25));
		btnCompararDiretorios.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnCompararDiretorios.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnCompararDiretoriosActionPerformed(evt);
			}
		});
		barraFerra.add(btnCompararDiretorios);

		pb.setMinimum(1);
		pb.setMinimumSize(new java.awt.Dimension(458, 21));
		pb.setPreferredSize(new java.awt.Dimension(458, 21));
		barraFerra.add(pb);

		btnSalvarLog.setMnemonic('S');
		btnSalvarLog.setText(bundle.getString("FrmCompararDiretorio.btnSalvarLog")); // NOI18N
		btnSalvarLog.setFocusable(false);
		btnSalvarLog.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
		btnSalvarLog.setMinimumSize(new java.awt.Dimension(75, 25));
		btnSalvarLog.setPreferredSize(new java.awt.Dimension(75, 25));
		btnSalvarLog.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
		btnSalvarLog.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				btnSalvarLogActionPerformed(evt);
			}
		});
		barraFerra.add(btnSalvarLog);

		getContentPane().add(barraFerra, java.awt.BorderLayout.NORTH);

		panelCentral.setLayout(new javax.swing.BoxLayout(panelCentral, javax.swing.BoxLayout.Y_AXIS));

		panelDiretorio.setLayout(new java.awt.GridLayout(1, 2));

		panelDiretorio1.setBorder(
				javax.swing.BorderFactory.createTitledBorder(bundle.getString("FrmCompararDiretorio.panelDiretorio1"))); // NOI18N
		panelDiretorio1.setLayout(new java.awt.BorderLayout());

		cmbAba1.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				cmbAba1ItemStateChanged(evt);
			}
		});
		cmbAba1.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmbAba1ActionPerformed(evt);
			}
		});
		panelDiretorio1.add(cmbAba1, java.awt.BorderLayout.NORTH);
		panelDiretorio1.add(scrollDiretorio1, java.awt.BorderLayout.CENTER);

		panelDiretorio.add(panelDiretorio1);

		panelDiretorio2.setBorder(
				javax.swing.BorderFactory.createTitledBorder(bundle.getString("FrmCompararDiretorio.panelDiretorio2"))); // NOI18N
		panelDiretorio2.setLayout(new java.awt.BorderLayout());

		cmbAba2.addItemListener(new java.awt.event.ItemListener() {
			public void itemStateChanged(java.awt.event.ItemEvent evt) {
				cmbAba2ItemStateChanged(evt);
			}
		});
		cmbAba2.addActionListener(new java.awt.event.ActionListener() {
			public void actionPerformed(java.awt.event.ActionEvent evt) {
				cmbAba2ActionPerformed(evt);
			}
		});
		panelDiretorio2.add(cmbAba2, java.awt.BorderLayout.NORTH);
		panelDiretorio2.add(scrollDiretorio2, java.awt.BorderLayout.CENTER);

		panelDiretorio.add(panelDiretorio2);

		panelCentral.add(panelDiretorio);

		panelDiferencasEncontradas.setLayout(new java.awt.FlowLayout(java.awt.FlowLayout.LEADING));

		labDiferencasEncontradas.setText(bundle.getString("FrmCompararDiretorio.labDiferencasEncontradas")); // NOI18N
		panelDiferencasEncontradas.add(labDiferencasEncontradas);

		panelCentral.add(panelDiferencasEncontradas);
		panelCentral.add(scrollTabelaCompara);

		getContentPane().add(panelCentral, java.awt.BorderLayout.CENTER);

		barraStatus.setPreferredSize(new java.awt.Dimension(630, 20));
		barraStatus.setLayout(new java.awt.BorderLayout());

		barraStatus1.setText(bundle.getString("FrmCompararDiretorio.barraStatus1")); // NOI18N
		barraStatus1.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		barraStatus1.setMaximumSize(new java.awt.Dimension(200, 18));
		barraStatus1.setMinimumSize(new java.awt.Dimension(200, 18));
		barraStatus1.setPreferredSize(new java.awt.Dimension(200, 18));
		barraStatus.add(barraStatus1, java.awt.BorderLayout.WEST);

		barraStatus2.setBorder(javax.swing.BorderFactory.createBevelBorder(javax.swing.border.BevelBorder.LOWERED));
		barraStatus.add(barraStatus2, java.awt.BorderLayout.CENTER);

		getContentPane().add(barraStatus, java.awt.BorderLayout.SOUTH);

		setSize(new java.awt.Dimension(688, 572));
		setLocationRelativeTo(null);
	}// </editor-fold>//GEN-END:initComponents

	private void btnSalvarLogActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnSalvarLogActionPerformed
		String sLog;
		StringList listaLocal;

		if (listaCompara.size() > 0) {
			listaLocal = new StringList();
			sLog = Rotinas.getParams().getDiretorioSistema() + Rotinas.BARRA_INVERTIDA
					+ Rotinas.formataDate(Rotinas.FORMATO_DHARQUIVO, new Date()) + "_Comparacao.log";

			for (Diretorio diretorio : listaCompara) {
				listaLocal.add(diretorio.getCaminho());
			}

			try {
				listaLocal.SaveToFile(sLog);
			} catch (IOException ex) {
				Logger.getLogger(FrmCompararDiretorio.class.getName()).log(Level.SEVERE, null, ex);
			}
			Dialogo.mensagemInfo(this, "FrmCompararDiretorio.LogSalvoMemoDirSistema");
		}
	}// GEN-LAST:event_btnSalvarLogActionPerformed

	private void btnCompararDiretoriosActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_btnCompararDiretoriosActionPerformed
		String sCaminhoDir1 = "", sCaminhoDir2 = "";
		boolean bSelecionado;

		bSelecionado = false;
		if (!arvoreDiretorio1.isSelectionEmpty()) {
			catalogador.LerArvoreDiretorio(arvoreDiretorio1.getSelectionPath(), barraStatus2);
			sCaminhoDir1 = barraStatus2.getText();

			if (!arvoreDiretorio2.isSelectionEmpty()) {
				catalogador.LerArvoreDiretorio(arvoreDiretorio2.getSelectionPath(), barraStatus2);
				sCaminhoDir2 = barraStatus2.getText();
				bSelecionado = true;
			}
		}

		LimparComparacao();

		if (bSelecionado) {
			try {
				Comparar(sCaminhoDir1, sCaminhoDir2);
			} catch (SQLException ex) {
				Logger.getLogger(FrmCompararDiretorio.class.getName()).log(Level.SEVERE, null, ex);
			}
		} else {
			Dialogo.mensagemInfo(this, "FrmCompararDiretorio.DiretoriosNaoSelecionados");
		}
	}// GEN-LAST:event_btnCompararDiretoriosActionPerformed

	private void cmbAba1ItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_cmbAba1ItemStateChanged
		//
	}// GEN-LAST:event_cmbAba1ItemStateChanged

	private void cmbAba1ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmbAba1ActionPerformed
		Aba aba;

		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		arvoreDiretorio1.setModel(null);
		aba = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba1.getSelectedIndex() + 1);
		catalogador.CarregarArvore(arvoreDiretorio1, aba);
		arvoreDiretorio1.setSelectionRow(0);
		LimparComparacao();

		setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}// GEN-LAST:event_cmbAba1ActionPerformed

	private void cmbAba2ActionPerformed(java.awt.event.ActionEvent evt) {// GEN-FIRST:event_cmbAba2ActionPerformed
		Aba aba;

		setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));

		arvoreDiretorio2.setModel(null);
		aba = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba2.getSelectedIndex() + 1);
		catalogador.CarregarArvore(arvoreDiretorio2, aba);
		arvoreDiretorio2.setSelectionRow(0);
		LimparComparacao();

		setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
	}// GEN-LAST:event_cmbAba2ActionPerformed

	private void cmbAba2ItemStateChanged(java.awt.event.ItemEvent evt) {// GEN-FIRST:event_cmbAba2ItemStateChanged
		// TODO add your handling code here:
	}// GEN-LAST:event_cmbAba2ItemStateChanged

	private void formWindowOpened(java.awt.event.WindowEvent evt) {// GEN-FIRST:event_formWindowOpened
		Aba aba1;

		for (Aba aba : catalogador.listaAbas) {
			cmbAba1.addItem(aba.getNome());
			cmbAba2.addItem(aba.getNome());
		}
		cmbAba1.setSelectedIndex(0);
		cmbAba2.setSelectedIndex(0);

		aba1 = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba1.getSelectedIndex() + 1);
		catalogador.CarregarArvore(arvoreDiretorio1, aba1);

		aba1 = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba2.getSelectedIndex() + 1);
		catalogador.CarregarArvore(arvoreDiretorio2, aba1);
	}// GEN-LAST:event_formWindowOpened

	// Variables declaration - do not modify//GEN-BEGIN:variables
	private javax.swing.JToolBar barraFerra;
	private javax.swing.JPanel barraStatus;
	private javax.swing.JLabel barraStatus1;
	private javax.swing.JLabel barraStatus2;
	private javax.swing.JButton btnCompararDiretorios;
	private javax.swing.JButton btnSalvarLog;
	private javax.swing.JComboBox<String> cmbAba1;
	private javax.swing.JComboBox<String> cmbAba2;
	private javax.swing.JLabel labDiferencasEncontradas;
	private javax.swing.JPanel panelCentral;
	private javax.swing.JPanel panelDiferencasEncontradas;
	private javax.swing.JPanel panelDiretorio;
	private javax.swing.JPanel panelDiretorio1;
	private javax.swing.JPanel panelDiretorio2;
	public javax.swing.JProgressBar pb;
	private javax.swing.JScrollPane scrollDiretorio1;
	private javax.swing.JScrollPane scrollDiretorio2;
	private javax.swing.JScrollPane scrollTabelaCompara;
	// End of variables declaration//GEN-END:variables

	private void montarArvores() {
		arvoreDiretorio1 = new Arvore(null);
		scrollDiretorio1.setViewportView(arvoreDiretorio1);

		arvoreDiretorio2 = new Arvore(null);
		scrollDiretorio2.setViewportView(arvoreDiretorio2);
	}

	private void LimparComparacao() {
		pb.setValue(1);
		tabelaCompara = new Tabela(catalogador, null, null, pb, false);
		tabelaCompara.getSelectionModel().setSelectionInterval(0, 0);
		tabelaCompara.setSombrearLinhas(true);
		scrollTabelaCompara.setViewportView(tabelaCompara);
		btnSalvarLog.setEnabled(false);
		barraStatus2.setText("");
	}

	private String SQLCompara(Aba aba1, Aba aba2, String caminho1, String caminho2) {
		String sSQL;

		sSQL = DiretorioBO.SQL_CONSULTA_ARQUIVO + " WHERE aba=" + aba1.getCodigo() + " AND caminho LIKE "
				+ Rotinas.QuotedStr(caminho1 + "%") + " AND nome NOT IN (SELECT nome FROM Diretorios " + " WHERE aba="
				+ aba2.getCodigo() + " AND caminho LIKE " + Rotinas.QuotedStr(caminho2 + "%") + ")"
				+ " ORDER BY 1, 2, 3";
		return sSQL;
	}

	private void Comparar(String sCaminhoDir1, String sCaminhoDir2) throws SQLException {
		String sSQL;
		Aba aba1, aba2;
		int tamLista;

		aba1 = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba1.getSelectedIndex() + 1);
		aba2 = AbaBO.getInstancia().pegaAbaPorOrdem(catalogador.listaAbas, cmbAba2.getSelectedIndex() + 1);

		sSQL = SQLCompara(aba1, aba2, sCaminhoDir1, sCaminhoDir2);
		listaCompara = DiretorioBO.getInstancia().carregarDiretorio(sSQL, "consultaarquivo",
				frmCompararDiretorioProgresso);

		if (listaCompara.size() > 0) {
			tabelaCompara = new Tabela(catalogador, listaCompara, catalogador.listaExtensoes, pb, true);
			tabelaCompara.getSelectionModel().setSelectionInterval(0, 0);
			tabelaCompara.setSombrearLinhas(true);
			scrollTabelaCompara.setViewportView(tabelaCompara);

			tamLista = listaCompara.size();
			barraStatus2.setText(String.valueOf(tamLista));
			btnSalvarLog.setEnabled(true);
		} else {
			Dialogo.mensagemInfo(this, "FrmCompararDiretorio.NenhumaDiferencaEncontrada");
		}
	}

	private void mudarLingua() {
		setTitle(Rotinas.getRecurso("FrmCompararDiretorio.titulo"));
		btnCompararDiretorios.setText(Rotinas.getRecurso("FrmCompararDiretorio.btnCompararDiretorios"));
		btnSalvarLog.setText(Rotinas.getRecurso("FrmCompararDiretorio.btnSalvarLog"));
		panelDiretorio1.setBorder(createTitledBorder(Rotinas.getRecurso("FrmCompararDiretorio.panelDiretorio1")));
		panelDiretorio2.setBorder(createTitledBorder(Rotinas.getRecurso("FrmCompararDiretorio.panelDiretorio2")));
		labDiferencasEncontradas.setText(Rotinas.getRecurso("FrmCompararDiretorio.labDiferencasEncontradas"));
		barraStatus1.setText(Rotinas.getRecurso("FrmCompararDiretorio.barraStatus1"));
	}
}
